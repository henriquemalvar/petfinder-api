generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                String              @id @default(uuid())
  name              String
  email             String              @unique
  password          String
  avatar            String? // opcional
  whatsapp          String?
  instagram         String?
  contactPreference String?
  address           String? // endere√ßo completo
  latitude          Float? // latitude
  longitude         Float? // longitude
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  pets              Pet[]
  posts             Post[]
  tokens            NotificationToken[]
  notifications     Notification[]
}

enum PetGender {
  MALE
  FEMALE
}

enum PetSize {
  SMALL
  MEDIUM
  LARGE
}

model Pet {
  id          String    @id @default(uuid())
  name        String
  type        String
  breed       String
  age         String
  gender      PetGender
  size        PetSize
  image       String?
  description String
  castrated   Boolean
  vaccinated  Boolean
  location    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  posts       Post[]
}

enum PostType {
  LOST
  FOUND
  ADOPTION
}

enum PostStatus {
  ACTIVE
  RESOLVED
  CANCELED
}

model Post {
  id            String         @id @default(uuid())
  title         String
  content       String
  pet           Pet            @relation(fields: [petId], references: [id], onDelete: Cascade)
  petId         String
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  type          PostType
  location      String
  status        PostStatus
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  notifications Notification[]
}

model Notification {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model NotificationToken {
  id        String   @id @default(uuid())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
